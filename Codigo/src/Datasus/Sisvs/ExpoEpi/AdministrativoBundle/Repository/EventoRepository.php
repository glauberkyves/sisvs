<?php

namespace Datasus\Sisvs\ExpoEpi\AdministrativoBundle\Repository;

use Datasus\Sisvs\Base\BaseBundle\Repository\BaseRepository;
use Symfony\Component\HttpFoundation\Request;

/**
 * EventoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventoRepository extends BaseRepository
{

    public function getResultGrid(Request $request)
    {
        $params = array();
        parse_str($request->query->get('data'), $params);
        $columns = array(
            'e.coSeqEvento',
            'e.noEvento',
            'e.anEvento',
            'e.stAtivo'
        );

        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select($columns)
            ->from($this->getEntityName(), 'e');

        if ($params['stAtivo'] == '' and $params['noEvento'] == '') {
            $query->andWhere($query->expr()->eq("e.stAtivo", ":stAtivo"))
                ->setParameter('stAtivo', 'S');
        }
        if ($params['stAtivo'] != null) {
            $query->andWhere($query->expr()->eq("e.stAtivo", ":stAtivo"))
                ->setParameter('stAtivo', $params['stAtivo']);
        }

        if (isset($params['noEvento']) and $params['noEvento']) {
            $query->andWhere($query->expr()->like("UPPER(e.noEvento)", "UPPER(:noEvento)"))
                ->setParameter('noEvento', '%' . $params['noEvento'] . '%');
        }

        $this->addOrderBy($query, $request);

        return $query
            ->getQuery()
            ->getArrayResult();
    }

    public function checkDuplicityAno($entity)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('e')
            ->from($this->_entityName, 'e')
            ->andWhere($queryBuilder->expr()->eq('UPPER(e.anEvento)', 'UPPER(:anEvento)'))
            ->setParameter(':anEvento', trim($entity->getAnEvento()));


        if ($entity->getCoSeqEvento()) {
            $query->andWhere($queryBuilder->expr()->neq('e.coSeqEvento', ':coSeqEvento'))
                ->setParameter('coSeqEvento', $entity->getCoSeqEvento());
        }

        return $query->getQuery()->getResult();
    }

    public function getAnoByEvento($coEvento)
    {
        return 'retorno repository';
    }
}
